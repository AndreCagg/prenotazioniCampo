/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.prenotazionicampo;

import java.time.*;
import java.time.LocalDate;
import java.io.*;
import java.util.*;
import java.lang.*;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.io.File;

/**
 *
 * @author caggi
 */
public class Start extends javax.swing.JFrame {

    ArrayList<Giocatore> presenti = new ArrayList<>();
    Boolean g = false, b = false;

    /**
     * Creates new form Start
     */
    public Start() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();
        jLabel22 = new javax.swing.JLabel();
        err3 = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        txtReferente = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txthh = new javax.swing.JTextField();
        txtmm = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        radioSIpagato = new javax.swing.JRadioButton();
        radioNOpagato = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        quota = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtgg = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtmese = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtyyyy = new javax.swing.JTextField();
        conf = new javax.swing.JButton();
        err2 = new javax.swing.JTextField();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCognome = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDataNascitagg = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        radioSICert = new javax.swing.JRadioButton();
        radioNOCert = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        radioSICe = new javax.swing.JRadioButton();
        radioNOCe = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        aggiungi = new javax.swing.JButton();
        err = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtDataNascitamm = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtDataNascitaanno = new javax.swing.JTextField();
        txtScadCertgg = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtScadCertmm = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtScadCeAnno = new javax.swing.JTextField();
        txtScadCegg = new javax.swing.JTextField();
        txtScadCemm = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtScadCertAnno = new javax.swing.JTextField();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        radionome = new javax.swing.JRadioButton();
        radiocognome = new javax.swing.JRadioButton();
        radiocodice = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        cercaRis = new javax.swing.JTextArea();
        cerca = new javax.swing.JButton();
        parametro = new javax.swing.JTextField();
        err4 = new javax.swing.JTextField();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        referente = new javax.swing.JRadioButton();
        data = new javax.swing.JRadioButton();
        par = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        ris = new javax.swing.JTextArea();
        trova = new javax.swing.JButton();
        err5 = new javax.swing.JTextField();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        reset = new javax.swing.JButton();
        err6 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentShown(evt);
            }
        });

        area.setEditable(false);
        area.setColumns(20);
        area.setRows(5);
        jScrollPane1.setViewportView(area);

        jLabel22.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel22.setText("PRENOTAZIONI DI OGGI");

        err3.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(err3, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(468, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(err3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("PRENOTAZIONI DI OGGI", jPanel1);

        jTabbedPane2.setEnabled(false);

        jPanel3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel3FocusGained(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel13.setText("REFERENTE");

        jLabel15.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel15.setText("ORARIO (hh:mm)");

        jLabel16.setText(":");

        jLabel17.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel17.setText("PAGATO");

        radioSIpagato.setText("SI");
        radioSIpagato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioSIpagatoActionPerformed(evt);
            }
        });

        radioNOpagato.setText("NO");
        radioNOpagato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioNOpagatoActionPerformed(evt);
            }
        });

        jButton1.setText("AGGIUNGI GIOCATORE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggiungig(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel18.setText("â‚¬");

        jLabel19.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel19.setText("DATA (dd/MM/yyyy)");

        jLabel20.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel20.setText("\\");

            jLabel21.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
            jLabel21.setText("\\");

                conf.setText("CONFERMA PRENOTAZ");
                conf.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        confActionPerformed(evt);
                    }
                });

                err2.setEditable(false);

                javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
                jPanel3.setLayout(jPanel3Layout);
                jPanel3Layout.setHorizontalGroup(
                    jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txthh, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtmm, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtReferente, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel19)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtgg, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel20)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtmese, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel21)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtyyyy, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel17))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(err2, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(conf, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(radioSIpagato)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioNOpagato)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quota, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21))
                );
                jPanel3Layout.setVerticalGroup(
                    jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtReferente, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(radioSIpagato)
                                .addComponent(radioNOpagato)
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(quota, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtgg, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtmese, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtyyyy, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(conf, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txthh, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtmm, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(53, 53, 53)
                                .addComponent(err2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(465, Short.MAX_VALUE))
                );

                jTabbedPane2.addTab("tab1", jPanel3);

                jTabbedPane1.addTab("AGGIUNGI UNA PRENOTAZIONE", jTabbedPane2);

                jTabbedPane3.setEnabled(false);

                jPanel2.setToolTipText("");

                jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                jLabel1.setText("NOME");

                txtNome.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

                jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                jLabel2.setText("COGNOME");

                txtCognome.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

                jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                jLabel3.setText("SCADENZA CERTIFICATO MEDICO (dd/MM/yyyy)");

                txtDataNascitagg.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

                jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                jLabel4.setText("CERTIFICATO MEDICO");

                radioSICert.setText("SI");
                radioSICert.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        radioSICertActionPerformed(evt);
                    }
                });

                radioNOCert.setText("NO");
                radioNOCert.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        radioNOCertActionPerformed(evt);
                    }
                });

                jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                jLabel5.setText("DATA DI NASCITA (dd/MM/yyyy)");

                jLabel6.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                jLabel6.setText("DOCUMENTO DI RICONOSCIMENTO");

                radioSICe.setText("SI");
                radioSICe.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        radioSICeActionPerformed(evt);
                    }
                });

                radioNOCe.setText("NO");
                radioNOCe.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        radioNOCeActionPerformed(evt);
                    }
                });

                jLabel7.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                jLabel7.setText("SCADENZA DOCUMENTO DI RICONOSCIMENTO (dd/MM/yyyy)");

                aggiungi.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                aggiungi.setText("AGGIUNGI");
                aggiungi.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        aggiungiActionPerformed(evt);
                    }
                });

                err.setEditable(false);

                jLabel8.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                jLabel8.setText("/");

                txtDataNascitamm.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

                jLabel9.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                jLabel9.setText("/");

                txtDataNascitaanno.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

                txtScadCertgg.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

                jLabel10.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                jLabel10.setText("/");

                txtScadCertmm.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

                jLabel11.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                jLabel11.setText("/");

                jLabel12.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                jLabel12.setText("/");

                txtScadCeAnno.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

                txtScadCegg.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

                txtScadCemm.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

                jLabel14.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
                jLabel14.setText("/");

                txtScadCertAnno.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

                javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                jPanel2.setLayout(jPanel2Layout);
                jPanel2Layout.setHorizontalGroup(
                    jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCognome, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(radioSICert)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(radioNOCert))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(radioSICe)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(radioNOCe))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtScadCegg, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtScadCemm, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtScadCeAnno, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtDataNascitagg, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtDataNascitamm, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtDataNascitaanno, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(txtScadCertgg, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel10)
                                                .addGap(2, 2, 2)
                                                .addComponent(txtScadCertmm, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel11)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtScadCertAnno, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(err, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(527, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(aggiungi, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(295, 295, 295))
                );
                jPanel2Layout.setVerticalGroup(
                    jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNome)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCognome))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDataNascitagg)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDataNascitamm)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDataNascitaanno))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioSICert)
                            .addComponent(radioNOCert))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtScadCertgg)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtScadCertmm)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtScadCertAnno))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioSICe)
                            .addComponent(radioNOCe))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtScadCegg)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtScadCemm)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtScadCeAnno))
                        .addGap(24, 24, 24)
                        .addComponent(aggiungi, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(err, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88))
                );

                jTabbedPane3.addTab("tab1", jPanel2);

                jTabbedPane1.addTab("AGGIUNGI GIOCATORE", jTabbedPane3);

                radionome.setText("Nome");
                radionome.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        radionomeActionPerformed(evt);
                    }
                });

                radiocognome.setText("Cognome");
                radiocognome.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        radiocognomeActionPerformed(evt);
                    }
                });

                radiocodice.setText("Codice");
                radiocodice.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        radiocodiceActionPerformed(evt);
                    }
                });

                cercaRis.setEditable(false);
                cercaRis.setColumns(20);
                cercaRis.setRows(5);
                jScrollPane2.setViewportView(cercaRis);

                cerca.setText("CERCA");
                cerca.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        cercaActionPerformed(evt);
                    }
                });

                err4.setEditable(false);

                javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
                jPanel4.setLayout(jPanel4Layout);
                jPanel4Layout.setHorizontalGroup(
                    jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(err4, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(parametro, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cerca, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radionome, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radiocognome, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radiocodice, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(737, Short.MAX_VALUE))
                );
                jPanel4Layout.setVerticalGroup(
                    jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(radionome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radiocognome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radiocodice)
                        .addGap(17, 17, 17)
                        .addComponent(parametro, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cerca, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addComponent(err4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(83, Short.MAX_VALUE))
                );

                jTabbedPane4.addTab("RICERCA GIOCATORE", jPanel4);

                jTabbedPane5.setEnabled(false);

                referente.setText("Referente");
                referente.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        referenteActionPerformed(evt);
                    }
                });

                data.setText("Data (dd-MM-yyyy)");
                data.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        dataActionPerformed(evt);
                    }
                });

                ris.setColumns(20);
                ris.setRows(5);
                jScrollPane3.setViewportView(ris);

                trova.setText("CERCA");
                trova.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        trovaActionPerformed(evt);
                    }
                });

                err5.setEditable(false);

                javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
                jPanel5.setLayout(jPanel5Layout);
                jPanel5Layout.setHorizontalGroup(
                    jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(err5, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(trova, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(par, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(733, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(referente, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(data))
                        .addGap(0, 0, Short.MAX_VALUE))
                );
                jPanel5Layout.setVerticalGroup(
                    jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(referente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(data)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(par, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(trova, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(err5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(34, Short.MAX_VALUE))
                );

                jTabbedPane5.addTab("tab1", jPanel5);

                jTabbedPane4.addTab("RICERCA PRENOTAZIONE", jTabbedPane5);

                jTabbedPane6.setEnabled(false);

                jPanel6.setEnabled(false);

                reset.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
                reset.setText("RESET");
                reset.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        resetActionPerformed(evt);
                    }
                });

                err6.setEditable(false);

                jTextArea1.setEditable(false);
                jTextArea1.setColumns(20);
                jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
                jTextArea1.setRows(5);
                jTextArea1.setText("!ATTENZIONE! \nLa seguente operazione cancellerÃ  \ntutti i dati memorizzati inclusi: \ngiocatori, prenotazioni e impostazioni");
                jScrollPane4.setViewportView(jTextArea1);

                javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
                jPanel6.setLayout(jPanel6Layout);
                jPanel6Layout.setHorizontalGroup(
                    jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(310, 310, 310)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(err6, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(536, Short.MAX_VALUE))
                );
                jPanel6Layout.setVerticalGroup(
                    jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(err6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(432, Short.MAX_VALUE))
                );

                jTabbedPane6.addTab("tab1", jPanel6);

                jTabbedPane4.addTab("RESET", jTabbedPane6);

                jTabbedPane1.addTab("TOOLS", jTabbedPane4);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1)
                        .addContainerGap())
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                );

                pack();
            }// </editor-fold>//GEN-END:initComponents


    private void aggiungiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggiungiActionPerformed
        // TODO add your handling code here:
        Boolean b = false, a = false;
        Integer j = 0;
        //controllo !=null
        //data di nascita
        try {
            if (!this.checkNull(txtDataNascitagg.getText().toString(), txtDataNascitamm.getText().toString(), txtDataNascitaanno.getText().toString())) {
                err.setText("Data di nascita incompleta");
            } else {
                //controllo validita del formato della data
                //controllo data di nascita
                if (!this.dateValidation(Integer.parseInt(txtDataNascitagg.getText()), Integer.parseInt(txtDataNascitamm.getText()), Integer.parseInt(txtDataNascitaanno.getText()))) {
                    err.setText("Data di nascita non valida");
                } else {
                    err.setText("");
                    j++;
                }
            }

            //controllo data certificato medico
            if (!this.checkNull(txtScadCertgg.getText().toString(), txtScadCertmm.getText().toString(), txtScadCertAnno.getText().toString())) {
                txtScadCertgg.setText("00");
                txtScadCertmm.setText("00");
                txtScadCertAnno.setText("0000");
                err.setText("");
            } else {
                //contorllo data certificato medico
                if (!this.dateValidation(Integer.parseInt(txtScadCertgg.getText()), Integer.parseInt(txtScadCertmm.getText()), Integer.parseInt(txtScadCertAnno.getText()))) {
                    err.setText("Data di scadenza del certificato medico non valida");
                } else {
                    err.setText("");
                    j++;
                }
            }

            //controllo data documento di riconoscimento
            if (!this.checkNull(txtScadCegg.getText().toString(), txtScadCemm.getText().toString(), txtScadCeAnno.getText().toString())) {
                err.setText("");
                txtScadCegg.setText("00");
                txtScadCemm.setText("00");
                txtScadCeAnno.setText("0000");
            } else {
                //controllo data documento riconoscimento
                if (!this.dateValidation(Integer.parseInt(txtScadCegg.getText()), Integer.parseInt(txtScadCemm.getText()), Integer.parseInt(txtScadCeAnno.getText()))) {
                    err.setText("Data di scadenza del documento di riconoscimento non valida");
                } else {
                    err.setText("");
                    j++;
                }
            }

            String s = txtCognome.getText() + ";" + txtNome.getText() + ";" + txtDataNascitagg.getText() + txtDataNascitamm.getText() + txtDataNascitaanno.getText();

            s.toLowerCase();

            if (j == 3) {
                try {
                    try {
                        TextFile file = new TextFile("giocatori/giocatori.txt", 'R');
                        if (this.findPlayer(file, s)) {

                            //apertura file del giocatore con conseguente aggiornamento delle info
                            TextFile agg = new TextFile("giocatori/" + txtCognome.getText() + txtNome.getText() + ".txt", 'W');
                            this.saveToFile(agg);
                            agg.closeFile('W');

                            err.setText("Anagrafica aggiornata");
                            try {
                                Thread.sleep(250);
                                this.clear();
                            } catch (InterruptedException ex) {

                            }
                        } else {
                            //err.setText("ok");
                            //creazione file del giocatore
                            try {
                                TextFile giocatore = new TextFile("giocatori/" + txtCognome.getText().toString() + txtNome.getText().toString() + ".txt", 'W');
                                this.saveToFile(giocatore);
                                giocatore.closeFile('W');
                                err.setText("anagrafica inserita!");
                                a = true;
                            } catch (FileNotFoundException fn) {
                                err.setText("voce non trovata oppure archivio danneggiato o alterato");
                            }

                        }
                        file.closeFile('R');

                        if (a == true) {
                            this.refreshElenco(s);
                            try {
                                Thread.sleep(250);
                                this.clear();
                            } catch (InterruptedException ex) {

                            }
                        }
                    } catch (FileNotFoundException fn) {
                        err2.setText("voce non trovata oppure archivio danneggiato o alterato");
                    }

                } catch (IOException e) {
                    err.setText("errore di I/O");
                }
            } else {
                //err.setText("errore generico");
            }
        } catch (NumberFormatException ex) {
            err.setText("formato valore inserito non valido");
        }

    }//GEN-LAST:event_aggiungiActionPerformed

    private void clear() {
        txtNome.setText("");
        txtCognome.setText("");
        txtDataNascitagg.setText("");
        txtDataNascitamm.setText("");
        txtDataNascitaanno.setText("");
        txtScadCertgg.setText("");
        txtScadCertmm.setText("");
        txtScadCertAnno.setText("");
        txtScadCegg.setText("");
        txtScadCemm.setText("");
        txtScadCeAnno.setText("");
        radioSICert.setSelected(false);
        radioSICe.setSelected(false);
        radioNOCert.setSelected(false);
        radioNOCe.setSelected(false);
        //err.setText("");
    }

    private void refreshElenco(String s) {
        try {
            TextFile aggElenco = new TextFile("giocatori/giocatori.txt", 'A');
            aggElenco.toFile(s);
            aggElenco.closeFile('A');
        } catch (IOException e) {

        }
    }

    private void saveProgressive() {
        Integer n = Integer.parseInt(this.getProgressive().toString()) + 1;
        try {
            TextFile f = new TextFile("settings/code.txt", 'W');
            f.toFile(n.toString());
            f.closeFile('W');
        } catch (IOException e) {

        }
    }

    private Integer getProgressive() {
        Integer n = 0;
        try {
            TextFile f = new TextFile("settings/code.txt", 'R');
            n = Integer.parseInt(f.fromFile().toString());
            f.closeFile('R');
        } catch (IOException e) {

        }
        return n;
    }

    private void saveToFile(TextFile giocatore) {
        String s = "";
        Boolean radioCert = false, radioCe = false;
        Integer n = Integer.parseInt(this.getProgressive().toString()) + 1;

        if (radioSICert.isSelected()) {
            radioCert = true;
        } else {
            radioCert = false;
        }

        if (radioSICe.isSelected()) {
            radioCe = true;
        } else {
            radioCe = false;
        }
        s += txtCognome.getText() + ";" + txtNome.getText() + ";" + this.adjustDate(txtDataNascitagg.getText()) + "-" + this.adjustDate(txtDataNascitamm.getText()) + "-" + txtDataNascitaanno.getText() + ";" + radioCert.toString() + ";" + this.adjustDate(txtScadCertgg.getText()) + "-" + this.adjustDate(txtScadCertmm.getText()) + "-" + txtScadCertAnno.getText() + ";" + radioCe.toString() + ";" + this.adjustDate(txtScadCegg.getText()) + "-" + this.adjustDate(txtScadCemm.getText()) + "-" + txtScadCeAnno.getText() + ";" + n;
        try {
            giocatore.toFile(s);
        } catch (IOException e) {

        }
        this.saveProgressive();
    }

    private String adjustDate(String gg) {
        String c = "0";
        if (Integer.parseInt(gg) > 0 && Integer.parseInt(gg) <= 9) {
            gg = c + gg.toString();
        }
        return gg;
    }

    private Boolean findPlayer(TextFile file, String s) {
        String t = "";
        Boolean b = false;
        try {
            while (!t.equalsIgnoreCase("| ERRORE |")) {
                t = file.fromFile();
                if (t.equals(s)) {
                    b = true;
                }
            }

            //file.closeFile('R');
        } catch (IOException e) {

        }

        return b;
    }

    private Boolean checkNull(String gg, String mm, String anno) {
        Boolean ret = false;
        if (gg.isBlank() || mm.isBlank() || anno.isBlank()) {
            ret = false;
        } else {
            ret = true;
        }

        return ret;
    }

    private Boolean dateValidation(Integer gg, Integer mm, Integer anno) {
        LocalDate ld = LocalDate.now();
        Boolean ret = false;

        //controlla giorno
        if (gg >= 0 && gg <= 31) {
            //controllo mese
            if (mm >= 0 && mm <= 12) {
                if (anno >= 0000) {
                    ret = true;
                }
            }
        } else {
            ret = false;
        }

        return ret;
    }
    private void radioSICertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioSICertActionPerformed
        // TODO add your handling code here:
        radioNOCert.setSelected(false);
    }//GEN-LAST:event_radioSICertActionPerformed

    private void radioNOCertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioNOCertActionPerformed
        // TODO add your handling code here:
        radioSICert.setSelected(false);
    }//GEN-LAST:event_radioNOCertActionPerformed

    private void radioSICeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioSICeActionPerformed
        // TODO add your handling code here:
        radioNOCe.setSelected(false);
    }//GEN-LAST:event_radioSICeActionPerformed

    private void radioNOCeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioNOCeActionPerformed
        // TODO add your handling code here:
        radioSICe.setSelected(false);
    }//GEN-LAST:event_radioNOCeActionPerformed

    private void radioSIpagatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioSIpagatoActionPerformed
        // TODO add your handling code here:
        radioNOpagato.setSelected(false);
    }//GEN-LAST:event_radioSIpagatoActionPerformed

    private void radioNOpagatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioNOpagatoActionPerformed
        // TODO add your handling code here:
        radioSIpagato.setSelected(false);
    }//GEN-LAST:event_radioNOpagatoActionPerformed

    private void aggiungig(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggiungig
        // TODO add your handling code here:
        PlayerList pl = new PlayerList();

        pl.setVisible(true);
    }//GEN-LAST:event_aggiungig

    private void confActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confActionPerformed
        // TODO add your handling code here:
        Integer j = 0;
        String s = "", t = "", c = "";
        Boolean libero = false, fst = false;
        ArrayList<LocalDateTime> date = new ArrayList<>();
        LocalDateTime datan = null, datav = null, datas = null;
        String[] stringa = null;
        try {
            if (!this.checkNull(txtgg.getText().toString(), txtmese.getText().toString(), txtyyyy.getText().toString())) {
                err2.setText("Data di prenotazione incompleta");
            } else {
                //controllo data di prenotazione
                if (!this.dateValidation(Integer.parseInt(txtgg.getText()), Integer.parseInt(txtmese.getText()), Integer.parseInt(txtyyyy.getText()))) {
                    err.setText("Data di prenotazione non valida");
                } else {
                    err2.setText("");
                    j++;
                }
            }

            if (!txtReferente.getText().toString().equals(null)) {
                j++;
            } else {
                err2.setText("Il campo Referente deve essere compilato");
            }

            if (radioSIpagato.isSelected() || radioNOpagato.isSelected()) {
                j++;
            } else {
                err2.setText("ï¿½ necessario selezionare se la squadra ha pagato");
            }

            try {
                TextFile ins = new TextFile("settings/inseriti.txt", 'R');
                g = Boolean.parseBoolean(ins.fromFile());
                ins.closeFile('R');
            } catch (IOException ex) {
                err2.setText("errore di I/O");
            }
            if (!g) {
                err2.setText("bisogna inserire almeno un giocatore");
                System.out.println(g);
            } else {
                j++;
            }

            if (!txthh.getText().toString().isBlank() && !txtmm.getText().toString().isBlank()) {
                j++;
            } else {
                err2.setText("orario nullo o incompleto");
            }

            //controllo se sono stati inseriti dei giocatori
            /*try {
                String tm = "";
                TextFile tmp = new TextFile("partite/tmp.txt", 'R');

                while (!tm.equalsIgnoreCase("| ERRORE |")) {
                    tm += tmp.fromFile();
                }

                if (tm.isBlank()) {
                    err2.setText("inserire almeno un giocatore");
                } else {
                    j++;
                }
                tmp.closeFile('R');
            } catch (IOException e) {
                err2.setText("errore di I/O");
            }*/
            //scrittura su file
            System.out.println(j);
            if (j == 5) {
                s = txtReferente.getText().toLowerCase() + ";" + this.adjustDate(txtgg.getText()) + "-" + this.adjustDate(txtmese.getText()) + "-" + this.adjustDate(txtyyyy.getText()) + ";" + txthh.getText() + "-" + txtmm.getText();

                //reset del inseriti
                try {
                    TextFile ins = new TextFile("settings/inseriti.txt", 'W');
                    ins.toFile("false");
                    ins.closeFile('W');
                } catch (IOException ex) {
                    err2.setText("errore di I/O");
                }
                //controllo della data e orario
                /* try {
                TextFile controllo = new TextFile("partite/partite.txt", 'R');

                while (!t.equalsIgnoreCase("| ERRORE |")) {
                    t = controllo.fromFile();

                    //mi prendo la data vedo la data e l'ora e le comparo
                    //mi splitto l'intera stringa
                    stringa = t.split(";");*/
 /*if (stringa.length > 1) {

                        datav = this.createdataV(stringa);
                        datan = this.createdataN();
                        //o=true;
                        date.add(datav);
                    }

                       
                    //se non ce alcun doppione 
                    if (!date.contains(datan) && g) {

                        libero = true;
                    } else {
                        err2.setText("data e fascia oraria giï¿½ occupata");
                    }
                    controllo.closeFile('R');
                }
               
            } catch (IOException e) {

            }*/
                //memorizzazione su file generico nel caso che non sia il primo
                /*if (libero && g) {
                err2.setText("");*/
                try {
                    try {
                        TextFile p = new TextFile("partite/partite.txt", 'A');

                        p.toFile(s);
                        p.closeFile('A');

                        PlayerList pl = new PlayerList();

                        TextFile sp = new TextFile("partite/" + txtReferente.getText().toLowerCase() + txtgg.getText() + txtmese.getText() + txtyyyy.getText() + ".txt", 'W');

                        sp.toFile(s + this.createSpecific());
                        sp.closeFile('W');
                    } catch (FileNotFoundException fn) {
                        err2.setText("voce non trovata oppure archivio danneggiato o alterato");
                    }

                } catch (IOException e) {
                    err2.setText("errore di I/O");
                }

                txtReferente.setText("");
                txtgg.setText("");
                txtmese.setText("");
                txtyyyy.setText("");
                radioSIpagato.setSelected(false);
                radioNOpagato.setSelected(false);
                quota.setText("");
                txthh.setText("");
                txtmm.setText("");
            }
        } catch (NumberFormatException nf) {
            err2.setText("formato valore inserito non valido");
        }

    }//GEN-LAST:event_confActionPerformed

    private void jPanel3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel3FocusGained
        // TODO add your handling code here:
        g = false;
    }//GEN-LAST:event_jPanel3FocusGained

    private void jPanel1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentShown
        // TODO add your handling code here:
        String t = "", s = "", data, ref, pre, gio[] = null, list = "", pippo, str[], mancanze = "", m = "";
        LocalDate oggi = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        Note n = new Note();
        //apertura file partite
        try {
            TextFile part = new TextFile("partite/partite.txt", 'R');
            while (!t.equalsIgnoreCase("| ERRORE |")) {
                t = part.fromFile();

                if (!t.equalsIgnoreCase("| ERRORE |")) {
                    //prendo la data
                    data = t.substring(t.indexOf(";") + 1, t.indexOf(";") + 11);
                    //conversione di tipo della data

                    LocalDate lc = LocalDate.parse(data, formatter);
                    //se la data corrisponde ad oggi recupero il referente
                    //controllo della data
                    if (lc.isEqual(oggi)) {

                        //recupero del referente
                        ref = t.substring(0, t.indexOf(";"));

                        //apertura della squadra del referente
                        try {
                            TextFile r = new TextFile("partite/" + ref + lc.getDayOfMonth() + lc.getMonthValue() + lc.getYear() + ".txt", 'R');
                            pre = r.fromFile();

                            //creazione dell'oggetto prenotazione
                            //splittaggio della stringa
                            String[] prenot = pre.split(";");
                            if (prenot.length < 5) {
                                gio = null;
                            } else {
                                gio = pre.substring(pre.indexOf(":") + 1).split(";");

                                //controllo documenti giocatori
                                //per tutti i giocatori
                                mancanze = "";
                                for (Integer i = 0; i < gio.length; i++) {
                                    n.setNote("");
                                    //mancanze="";
                                    //apro il file del giocatore
                                    TextFile tf = new TextFile("giocatori/" + this.scambia(gio[i]) + ".txt", 'R');
                                    pippo = tf.fromFile();

                                    //splitto la stringa
                                    str = pippo.split(";");

                                    //creazione dell'oggetto giocatore
                                    Giocatore oggg = new Giocatore(str[0], str[1], str[2], Boolean.parseBoolean(str[3]), str[4], Boolean.parseBoolean(str[5]), str[6], Integer.parseInt(str[7]));

                                    //controllo del certificato
                                    if (!oggg.getCertificato()) {
                                        mancanze += oggg.getCognome() + " " + oggg.getNome() + " manca cartificato medico,\n";
                                    } else {
                                        //prendo la data del certificato
                                        LocalDate cert = LocalDate.parse(oggg.getScadCertificato(), formatter);
                                        if (cert.isBefore(oggi)) {
                                            mancanze += oggg.getCognome() + " " + oggg.getNome() + " cartificato medico scaduto,\n";
                                        }
                                    }

                                    //controllo del documento d'identita
                                    if (!oggg.getCe()) {
                                        mancanze += oggg.getCognome() + " " + oggg.getNome() + " manca documento d'identitï¿½,\n";
                                    } else {
                                        //prendo la data del certificato
                                        LocalDate ce = LocalDate.parse(oggg.getScadCe(), formatter);
                                        if (ce.isBefore(oggi)) {
                                            mancanze += oggg.getCognome() + " " + oggg.getNome() + " documento d'identitï¿½ scaduto,\n";
                                        }
                                    }

                                    if (!mancanze.isBlank()) {
                                        n.setNote(mancanze);
                                    }
                                }

                                if (!n.getNote().isBlank()) {
                                    m = n.toString();
                                } else {
                                    m = "";
                                }
                            }
                            Prenotazione Oggpre = new Prenotazione(prenot[0], gio, Boolean.parseBoolean(prenot[4]), Double.parseDouble(prenot[3]), prenot[1], prenot[2]);
                            list += Oggpre.toString() + m + "\n-------------";
                            area.setText(list);
                            r.closeFile('R');
                        } catch (FileNotFoundException ex) {
                            err3.setText("impossibile trovare il file");
                        }

                    }
                }
            }
            part.closeFile('R');
        } catch (IOException e) {

        }
    }//GEN-LAST:event_jPanel1ComponentShown

    private void radionomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radionomeActionPerformed
        // TODO add your handling code here:
        if (radiocognome.isSelected() || radiocodice.isSelected()) {
            radiocognome.setSelected(false);
            radiocodice.setSelected(false);
        }
    }//GEN-LAST:event_radionomeActionPerformed

    private void radiocognomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radiocognomeActionPerformed
        // TODO add your handling code here:
        if (radionome.isSelected() || radiocodice.isSelected()) {
            radionome.setSelected(false);
            radiocodice.setSelected(false);
        }
    }//GEN-LAST:event_radiocognomeActionPerformed

    private void radiocodiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radiocodiceActionPerformed
        // TODO add your handling code here:
        if (radiocognome.isSelected() || radionome.isSelected()) {
            radiocognome.setSelected(false);
            radionome.setSelected(false);
        }
    }//GEN-LAST:event_radiocodiceActionPerformed

    private void cercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cercaActionPerformed
        // TODO add your handling code here:
        String s = "", dati[], player[], pl, sp, str = "";
        Boolean n = false, c = false, co = false;
        cercaRis.setText("");

        try {
            TextFile f = new TextFile("giocatori/giocatori.txt", 'R');
            //controllo se almeno un parametero ï¿½ selezionato
            if (!radionome.isSelected() && !radiocognome.isSelected() && !radiocodice.isSelected()) {
                err4.setText("ï¿½ necessario selezionare almeno un parametro");
            } else {
                err4.setText("");

                //ricerca tramite nome
                if (radionome.isSelected()) {
                    while (!s.equalsIgnoreCase("| ERRORE |")) {
                        s = f.fromFile();

                        dati = s.split(";");
                        //apertura del file specifico
                        if (dati.length > 1) {
                            TextFile spec = new TextFile("giocatori/" + dati[0] + dati[1] + ".txt", 'R');

                            sp = spec.fromFile();
                            player = sp.split(";");

                            //creazione dell ogetto
                            Giocatore gg = new Giocatore(player[1], player[0], player[2], Boolean.parseBoolean(player[3]), player[4], Boolean.parseBoolean(player[5]), player[6], Integer.parseInt(player[7]));

                            err4.setText("");
                            if (gg.getNome().equalsIgnoreCase(parametro.getText())) {
                                str += gg.toString() + "\n\n";
                                cercaRis.setText(str);
                                n = true;
                            }
                            /*if (!n) {
                                err4.setText("impossibile trovare una corrispondenza");
                                cercaRis.setText("");
                            }*/
                            spec.closeFile('R');
                        }
                    }
                    if (!n) {
                        err4.setText("impossibile trovare una corrispondenza");
                        cercaRis.setText("");
                    }
                }
                f.closeFile('R');

                //ricerca tramite cognome
                if (radiocognome.isSelected()) {
                    TextFile cog = new TextFile("giocatori/giocatori.txt", 'R');
                    while (!s.equalsIgnoreCase("| ERRORE |")) {
                        s = cog.fromFile();

                        dati = s.split(";");
                        //apertura del file specifico
                        if (dati.length > 1) {
                            TextFile spec = new TextFile("giocatori/" + dati[0] + dati[1] + ".txt", 'R');

                            sp = spec.fromFile();
                            player = sp.split(";");

                            //creazione dell ogetto
                            Giocatore gg = new Giocatore(player[1], player[0], player[2], Boolean.parseBoolean(player[3]), player[4], Boolean.parseBoolean(player[5]), player[6], Integer.parseInt(player[7]));

                            err4.setText("");
                            if (gg.getCognome().equalsIgnoreCase(parametro.getText())) {
                                str += gg.toString() + "\n\n";
                                cercaRis.setText(str);
                                c = true;
                            }
                            /*if (!c) {
                                err4.setText("impossibile trovare una corrispondenza");
                                cercaRis.setText("");
                            }*/
                            spec.closeFile('R');
                        }
                    }
                    if (!c) {
                        err4.setText("impossibile trovare una corrispondenza");
                        cercaRis.setText("");
                    }
                    cog.closeFile('R');
                }

                //ricerca tramite codice
                if (radiocodice.isSelected()) {
                    TextFile cod = new TextFile("giocatori/giocatori.txt", 'R');
                    while (!s.equalsIgnoreCase("| ERRORE |")) {
                        s = cod.fromFile();

                        dati = s.split(";");
                        //apertura del file specifico
                        if (dati.length > 1) {
                            TextFile spec = new TextFile("giocatori/" + dati[0] + dati[1] + ".txt", 'R');

                            sp = spec.fromFile();
                            player = sp.split(";");

                            //creazione dell ogetto
                            Giocatore gg = new Giocatore(player[1], player[0], player[2], Boolean.parseBoolean(player[3]), player[4], Boolean.parseBoolean(player[5]), player[6], Integer.parseInt(player[7]));

                            err4.setText("");
                            if (gg.getCode().toString().equalsIgnoreCase(parametro.getText())) {
                                str += gg.toString() + "\n\n";
                                cercaRis.setText(str);
                                co = true;
                            }
                            /*if (!co) {
                                cercaRis.setText("");
                                err4.setText("impossibile trovare una corrispondenza");
                            }*/
                            spec.closeFile('R');
                        }
                    }
                    if (!co) {
                        cercaRis.setText("");
                        err4.setText("impossibile trovare una corrispondenza");
                    }
                    cod.closeFile('R');
                }
            }

        } catch (IOException e) {

        }


    }//GEN-LAST:event_cercaActionPerformed

    private void referenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referenteActionPerformed
        // TODO add your handling code here:
        data.setSelected(false);
    }//GEN-LAST:event_referenteActionPerformed

    private void dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataActionPerformed
        // TODO add your handling code here:
        referente.setSelected(false);
    }//GEN-LAST:event_dataActionPerformed

    private void trovaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trovaActionPerformed
        // TODO add your handling code here:
        try {
            String s = "", dati[], giocatori[], daspec = "", oggettop[], str = "";
            Boolean n = false;
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            if (!referente.isSelected() && !data.isSelected()) {
                err5.setText("ï¿½ necessario selezionare almeno un parametro");
            } else {
                err5.setText("");
            }

            //ricarca per referente
            if (referente.isSelected()) {
                //apertura file generale
                try {
                    try {
                        try {
                            try {

                                TextFile p = new TextFile("partite/partite.txt", 'R');

                                while (!s.equalsIgnoreCase("| ERRORE |")) {
                                    s = p.fromFile();

                                    //splitto la stringa
                                    dati = s.split(";");

                                    if (dati.length > 1) {
                                        LocalDate lc = LocalDate.parse(dati[1], formatter);
                                        //ricerca per referente
                                        if (!s.equalsIgnoreCase("| ERRORE |")) {
                                            try {
                                                TextFile r = new TextFile("partite/" + dati[0] + lc.getDayOfMonth() + lc.getMonthValue() + lc.getYear() + ".txt", 'R');
                                                daspec = r.fromFile();

                                                //System.out.println(dati[0]);
                                                //creao l'oggetto
                                                oggettop = daspec.split(";");
                                                if (oggettop.length > 5) {
                                                    giocatori = daspec.substring(daspec.indexOf(":") + 1).split(";");
                                                    Prenotazione pre = new Prenotazione(oggettop[0], giocatori, Boolean.parseBoolean(oggettop[4]), Double.parseDouble(oggettop[3]), oggettop[1], oggettop[2]);

                                                    if (par.getText().equalsIgnoreCase(pre.getReferente())) {
                                                        str += pre.toString();
                                                        ris.setText(str);
                                                        n = true;
                                                        err5.setText("");

                                                    }
                                                } else {
                                                    Prenotazione pre = new Prenotazione(oggettop[0], null, Boolean.parseBoolean(oggettop[4]), Double.parseDouble(oggettop[3]), oggettop[1], oggettop[2]);
                                                    if (par.getText().equalsIgnoreCase(pre.getReferente())) {
                                                        str += pre.toString();
                                                        ris.setText(str);
                                                        n = true;
                                                        err5.setText("");
                                                    }
                                                }

                                                /*if (!n) {
                                                err5.setText("impossibile trovare una corrispondenza");
                                                ris.setText("");
                                            }*/
                                                r.closeFile('R');

                                            } catch (FileNotFoundException ex) {
                                                err5.setText("voce mancante, danneggiata o alterata");
                                                ris.setText("");
                                            }
                                        }
                                    }

                                }
                                if (!n) {
                                    err5.setText("impossibile trovare una corrispondenza");
                                    ris.setText("");
                                }
                                p.closeFile('R');
                            } catch (IOException e) {
                                err5.setText("errore di I/O");
                                ris.setText("");
                            }
                        } catch (DateTimeParseException dt) {
                            err5.setText("trovato formato data errato");
                            ris.setText("");
                        }
                    } catch (ArrayIndexOutOfBoundsException ai) {
                        ris.setText("");
                        err5.setText("errore generico");
                    }

                } catch (NumberFormatException nf) {
                    err5.setText("formato inserito non corretto");
                }
            }

            //ricerca per data
            if (data.isSelected()) {
                daspec = "";
                str = "";
                dati = null;
                giocatori = null;
                DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                String p[] = null;
                String end = "", list = "", app = "", adjust[], conv = "", x;
                Boolean t = false;
                try {
                    try {
                        try {
                            try {
                                TextFile d = new TextFile("partite/partite.txt", 'R');

                                while (!daspec.equalsIgnoreCase("| ERRORE |")) {
                                    conv = "";
                                    daspec = d.fromFile();

                                    dati = daspec.split(";");

                                    if (dati.length > 1) {
                                        //uso i giusti separator
                                        x = par.getText();
                                        if (x.contains("/")) {
                                            par.setText(x.replace("/", "-"));
                                        }
                                        //formalizzo la data
                                        adjust = par.getText().split("-");

                                        //giorno
                                        if (adjust[0].length() <= 1) {
                                            app = adjust[0];
                                            adjust[0] = "0" + app;
                                            conv += adjust[0];
                                            conv += "-";
                                        } else {
                                            conv += adjust[0] + "-";
                                        }

                                        //mese
                                        if (adjust[1].length() <= 1) {
                                            app = adjust[1];
                                            adjust[1] = "0" + app;
                                            conv += adjust[1];
                                            conv += "-";
                                        } else {
                                            conv += adjust[1] + "-";
                                        }
                                        conv += adjust[2];

                                        if (dati.length > 1) {
                                            //conversione del parametro in data

                                            LocalDate dataPar = LocalDate.parse(conv, formatter2);

                                            //conversione delle date presenti nel file
                                            LocalDate file = LocalDate.parse(dati[1], formatter2);

                                            if (dataPar.isEqual(file)) {
                                                //apro il file della prenotazione e creo l'oggetto
                                                TextFile spec = new TextFile("partite/" + dati[0] + file.getDayOfMonth() + file.getMonthValue() + file.getYear() + ".txt", 'R');
                                                str = spec.fromFile();
                                                p = str.split(";");
                                                t = true;
                                                System.out.println(t);
                                                //creaione oggetto
                                                if (p.length > 1) {
                                                    if (p.length > 5) {
                                                        end = str.substring(str.indexOf(":") + 1);
                                                        giocatori = end.split(";");

                                                        Prenotazione preSpec = new Prenotazione(dati[0], giocatori, Boolean.parseBoolean(p[4]), Double.parseDouble(p[3]), p[1], p[2]);
                                                        list += preSpec.toString() + "\n\n";
                                                        ris.setText(list);
                                                        ris.setCaretPosition(0);
                                                    } else {
                                                        Prenotazione preSpec = new Prenotazione(dati[0], null, Boolean.parseBoolean(p[4]), Double.parseDouble(p[3]), p[1], p[2]);
                                                        list += preSpec.toString() + "\n\n";
                                                        ris.setText(list);
                                                        ris.setCaretPosition(0);
                                                    }
                                                }

                                                spec.closeFile('R');

                                            }
                                            /*if (!t) {
                                            err5.setText("nessuna corrispondenza trovata");
                                            ris.setText("");*/
                                        }

                                    }

                                    if (!t) {
                                        err5.setText("nessuna corrispondenza trovata");
                                        ris.setText("");
                                    }
                                }
                                d.closeFile('R');

                            } catch (FileNotFoundException nf) {
                                err5.setText("registro danneggiato o alterato");
                                ris.setText("");
                            }
                        } catch (IOException e) {
                            err5.setText("errore di I/O");
                            ris.setText("");
                        }
                    } catch (DateTimeParseException dt) {
                        err5.setText("trovato formato data errato");
                        ris.setText("");
                    }
                } catch (ArrayIndexOutOfBoundsException ai) {
                    ris.setText("");
                    err5.setText("errore generico");
                }
            }

        } catch (NumberFormatException nf) {
            err5.setText("formato inserito non corretto");
        }

    }//GEN-LAST:event_trovaActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:
        ArrayList<String> del = new ArrayList<String>();
        String t = "", dati[];
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");

        try {
            try {
                //lettura di tutte le partite
                TextFile f = new TextFile("partite/partite.txt", 'R');
                while (!t.equalsIgnoreCase("| ERRORE |")) {
                    t = f.fromFile();
                    del.add(t);
                }
                f.closeFile('R');

                //splittaggio delle stringhe
                for (Integer i = 0; i < del.size(); i++) {
                    dati = del.get(i).split(";");

                    if (dati.length > 1) {
                        //creazione della data
                        LocalDate lc = LocalDate.parse(dati[1], formatter);

                        //eliminazione del file specifico della prenotazione 
                        File spec = new File("partite/" + dati[0] + lc.getDayOfMonth() + lc.getMonthValue() + lc.getYear() + ".txt");
                        spec.delete();

                        //eliminazione file generale partite
                        File gen = new File("partite/partite.txt");
                        gen.delete();

                        //ricreazione del file genereï¿½ale partite
                        TextFile rgen = new TextFile("partite/partite.txt", 'W');
                        rgen.closeFile('W');
                    }
                }

                dati = null;
                t = "";
                del.removeAll(del);

                //eliminazione dei giocatori
                TextFile gio = new TextFile("giocatori/giocatori.txt", 'R');
                while (!t.equalsIgnoreCase("| ERRORE |")) {
                    t = gio.fromFile();
                    del.add(t);
                }
                gio.closeFile('R');

                //splittaggio delle stringhe
                for (Integer j = 0; j < del.size(); j++) {
                    dati = del.get(j).split(";");

                    if (dati.length > 1) {

                        //eliminazione del file specifico dei giocatori
                        File sp = new File("giocatori/" + dati[0] + dati[1] + ".txt");
                        sp.delete();

                        //eliminazione file generale giocatori
                        File g = new File("giocatori/giocatori.txt");
                        g.delete();

                        //ricreazione del file genereï¿½ale partite
                        TextFile rg = new TextFile("giocatori/giocatori.txt", 'W');
                        rg.closeFile('W');
                    }

                }

                //reset del codice
                File cod = new File("settings/code.txt");
                cod.delete();

                //ricreazione del file codice
                TextFile fcod = new TextFile("settings/code.txt", 'W');
                fcod.toFile("0");
                fcod.closeFile('W');

                err6.setText("Reset eseguito con successo");
            } catch (FileNotFoundException e) {
                err6.setText("archivio danneggiato, corrotto o manomesso");
            }
        } catch (IOException e) {

        }
    }//GEN-LAST:event_resetActionPerformed

    private String scambia(String nome) {
        String nome2, cognome, s;
        nome2 = nome.substring(0, nome.indexOf("-"));
        cognome = nome.substring(nome.indexOf("-") + 1);
        return s = cognome + nome2;
    }

    private void setG(Boolean b) {
        this.b = b;
    }

    private Boolean getG() {
        return b;
    }

    private String createSpecific() {
        Double qu = null;
        String s = ";", t = "";
        String[] anagrafica;
        Boolean pag = false;

        if (quota.getText().isBlank()) {
            qu = 0.0;
            s += qu;
        } else {
            qu = Double.parseDouble(quota.getText());
            s += qu;
        }

        if (radioSIpagato.isSelected()) {
            pag = true;
            s += ";" + pag + ";";
        } else {
            pag = false;
            s += ";" + pag + ";";
        }
        s += ":";

        //apro file con i giocatori
        try {
            TextFile temp = new TextFile("partite/tmp.txt", 'R');
            while (!t.equalsIgnoreCase("| ERRORE |")) {
                t = temp.fromFile();
                anagrafica = t.split(";");
                if (anagrafica.length > 1) {
                    s += anagrafica[0] + "-" + anagrafica[1] + ";";
                }

            }

            temp.closeFile('R');

            TextFile tmp = new TextFile("partite/tmp.txt", 'W');
            tmp.toFile("");
            tmp.closeFile('W');
        } catch (IOException e) {
            e.printStackTrace();

        }
        return s;
    }

    private LocalDateTime createdataV(String[] stringa) {
        try {
            //splitto la data
            String[] data = stringa[1].split("-");

            //splitto l'ora
            String[] ora = stringa[2].split("-");

            return LocalDateTime.of(Integer.parseInt(data[2]), Integer.parseInt(data[1]), Integer.parseInt(data[0]), Integer.parseInt(ora[0]), Integer.parseInt(ora[1]));
        } catch (ArrayIndexOutOfBoundsException e) {
            return null;
        }

    }

    private LocalDateTime createdataN() {
        try {
            return LocalDateTime.of(Integer.parseInt(txtyyyy.getText()), Integer.parseInt(this.adjustDate(txtmese.getText())), Integer.parseInt(this.adjustDate(txtgg.getText())), Integer.parseInt(txthh.getText()), Integer.parseInt(txtmm.getText()));
        } catch (ArrayIndexOutOfBoundsException e) {
            return null;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Start.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Start.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Start.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Start.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Start().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aggiungi;
    private javax.swing.JTextArea area;
    private javax.swing.JButton cerca;
    private javax.swing.JTextArea cercaRis;
    private javax.swing.JButton conf;
    private javax.swing.JRadioButton data;
    private javax.swing.JTextField err;
    private javax.swing.JTextField err2;
    private javax.swing.JTextField err3;
    private javax.swing.JTextField err4;
    private javax.swing.JTextField err5;
    private javax.swing.JTextField err6;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField par;
    private javax.swing.JTextField parametro;
    private javax.swing.JTextField quota;
    private javax.swing.JRadioButton radioNOCe;
    private javax.swing.JRadioButton radioNOCert;
    private javax.swing.JRadioButton radioNOpagato;
    private javax.swing.JRadioButton radioSICe;
    private javax.swing.JRadioButton radioSICert;
    private javax.swing.JRadioButton radioSIpagato;
    private javax.swing.JRadioButton radiocodice;
    private javax.swing.JRadioButton radiocognome;
    private javax.swing.JRadioButton radionome;
    private javax.swing.JRadioButton referente;
    private javax.swing.JButton reset;
    private javax.swing.JTextArea ris;
    private javax.swing.JButton trova;
    private javax.swing.JTextField txtCognome;
    private javax.swing.JTextField txtDataNascitaanno;
    private javax.swing.JTextField txtDataNascitagg;
    private javax.swing.JTextField txtDataNascitamm;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtReferente;
    private javax.swing.JTextField txtScadCeAnno;
    private javax.swing.JTextField txtScadCegg;
    private javax.swing.JTextField txtScadCemm;
    private javax.swing.JTextField txtScadCertAnno;
    private javax.swing.JTextField txtScadCertgg;
    private javax.swing.JTextField txtScadCertmm;
    private javax.swing.JTextField txtgg;
    private javax.swing.JTextField txthh;
    private javax.swing.JTextField txtmese;
    private javax.swing.JTextField txtmm;
    private javax.swing.JTextField txtyyyy;
    // End of variables declaration//GEN-END:variables
}
